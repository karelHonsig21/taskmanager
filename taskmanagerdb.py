# Import pot≈ôebn√Ωch knihoven
import mysql.connector  # knihovna pro p≈ôipojen√≠ k MySQL
from mysql.connector import errorcode  # pro zachyt√°v√°n√≠ specifick√Ωch chyb
from datetime import datetime  # import pro pr√°ci s datumem a ƒçasem (zde nepou≈æit, ale m≈Ø≈æe b√Ωt p≈ôi roz≈°√≠≈ôen√≠)

# N√°zev datab√°ze
DB_NAME = "task_manager"

# Funkce 1: P≈ôipojen√≠ k datab√°zi
def pripojeni_db():
    try:
        # Nav√°z√°n√≠ p≈ôipojen√≠ k MySQL serveru (zadej sv√© p≈ôihla≈°ovac√≠ √∫daje)
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="12345"  # zde uprav podle sv√©ho nastaven√≠
        )
        print("‚úÖ P≈ôipojen√≠ k MySQL serveru bylo √∫spƒõ≈°n√©.")
        return conn  # funkce vrac√≠ objekt p≈ôipojen√≠ pro dal≈°√≠ pr√°ci
    except mysql.connector.Error as err:
        # Pokud p≈ôipojen√≠ sel≈æe, vyp√≠≈°e chybovou hl√°≈°ku a ukonƒç√≠ program
        print(f"‚ùå Chyba p≈ôi p≈ôipojov√°n√≠ k DB: {err}")
        exit(1)

# Funkce 2: Vytvo≈ôen√≠ datab√°ze a tabulky
def vytvoreni_db_a_tabulky(conn):
    cursor = conn.cursor()  # vytvo≈ôen√≠ kurzoru pro SQL dotazy
    try:
        # Vytvo≈ôen√≠ datab√°ze, pokud je≈°tƒõ neexistuje
        cursor.execute(f"CREATE DATABASE IF NOT EXISTS {DB_NAME} DEFAULT CHARACTER SET 'utf8mb4'")
        conn.database = DB_NAME  # p≈ôepnut√≠ na pr√°vƒõ vytvo≈ôenou datab√°zi

        # Vytvo≈ôen√≠ tabulky ukoly, pokud je≈°tƒõ neexistuje
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS ukoly (
                id INT AUTO_INCREMENT PRIMARY KEY,  # unik√°tn√≠ ID √∫kolu
                nazev VARCHAR(255) NOT NULL,        # n√°zev √∫kolu
                popis TEXT NOT NULL,                # popis √∫kolu
                stav ENUM('Nezah√°jeno','Prob√≠h√°','Hotovo') DEFAULT 'Nezah√°jeno',  # stav √∫kolu
                datum_vytvoreni DATETIME DEFAULT CURRENT_TIMESTAMP  # datum a ƒças vytvo≈ôen√≠ √∫kolu
            )
        """)
        print("‚úÖ Datab√°ze a tabulka p≈ôipraveny.")
    except mysql.connector.Error as err:
        # Zachyt√≠ chybu p≈ôi vytv√°≈ôen√≠ datab√°ze/tabulky a ukonƒç√≠ program
        print(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ DB/tabulky: {err}")
        exit(1)
    finally:
        cursor.close()  # v≈ædy uzav≈ôe kurzor

# Funkce 3: Hlavn√≠ menu programu
def hlavni_menu(conn):
    while True:
        # Zobrazen√≠ hlavn√≠ho menu
        print("\n===== TASK MANAGER =====")
        print("1 - P≈ôidat √∫kol")
        print("2 - Zobrazit √∫koly")
        print("3 - Aktualizovat √∫kol")
        print("4 - Odstranit √∫kol")
        print("5 - Konec programu")

        volba = input("Zadejte ƒç√≠slo volby: ")

        # Vyhodnocen√≠ volby u≈æivatele a vol√°n√≠ p≈ô√≠slu≈°n√Ωch funkc√≠
        if volba == "1":
            pridat_ukol(conn)
        elif volba == "2":
            zobrazit_ukoly(conn)
        elif volba == "3":
            aktualizovat_ukol(conn)
        elif volba == "4":
            odstranit_ukol(conn)
        elif volba == "5":
            print(">> Program ukonƒçen.")
            break  # ukonƒçen√≠ cyklu = konec programu
        else:
            print("‚ùå Neplatn√° volba. Zadejte ƒç√≠slo 1-5.")

# Funkce 4: P≈ôid√°n√≠ √∫kolu do datab√°ze
def pridat_ukol(conn):
    cursor = conn.cursor()
    while True:
        # Z√≠sk√°n√≠ n√°zvu √∫kolu od u≈æivatele
        nazev = input("Zadejte n√°zev √∫kolu: ").strip()
        if nazev == "":
            print("‚ö†Ô∏è N√°zev √∫kolu nesm√≠ b√Ωt pr√°zdn√Ω.")
            continue

        # Z√≠sk√°n√≠ popisu √∫kolu
        popis = input("Zadejte popis √∫kolu: ").strip()
        if popis == "":
            print("‚ö†Ô∏è Popis √∫kolu nesm√≠ b√Ωt pr√°zdn√Ω.")
            continue

        try:
            # Vlo≈æen√≠ √∫kolu do tabulky ukoly
            cursor.execute(
                "INSERT INTO ukoly (nazev, popis) VALUES (%s, %s)",
                (nazev, popis)
            )
            conn.commit()  # ulo≈æen√≠ zmƒõn do DB
            print(f"‚úÖ √ökol '{nazev}' byl p≈ôid√°n.")
            break
        except mysql.connector.Error as err:
            # Zachycen√≠ chyby p≈ôi vkl√°d√°n√≠ √∫kolu
            print(f"‚ùå Chyba p≈ôi vkl√°d√°n√≠ √∫kolu: {err}")
            break
    cursor.close()

# Funkce 5: Zobrazen√≠ √∫kol≈Ø (filtr na Nezah√°jeno a Prob√≠h√°)
def zobrazit_ukoly(conn):
    cursor = conn.cursor()
    try:
        # V√Ωbƒõr √∫kol≈Ø se stavem Nezah√°jeno nebo Prob√≠h√°
        cursor.execute("""
            SELECT id, nazev, popis, stav FROM ukoly
            WHERE stav IN ('Nezah√°jeno','Prob√≠h√°')
        """)
        rows = cursor.fetchall()
        if not rows:
            print("üì≠ ≈Ω√°dn√© √∫koly nejsou k dispozici.")
        else:
            print("\nüìã SEZNAM √öKOL≈Æ:")
            for row in rows:
                print(f"ID: {row[0]}, N√°zev: {row[1]}, Stav: {row[3]}")
                print(f"Popis: {row[2]}")
    except mysql.connector.Error as err:
        # Zachycen√≠ chyby p≈ôi naƒç√≠t√°n√≠ √∫kol≈Ø
        print(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ √∫kol≈Ø: {err}")
    cursor.close()

# Funkce 6: Aktualizace stavu √∫kolu
def aktualizovat_ukol(conn):
    cursor = conn.cursor()
    try:
        # Naƒçten√≠ v≈°ech √∫kol≈Ø pro zobrazen√≠ u≈æivateli
        cursor.execute("SELECT id, nazev, stav FROM ukoly")
        rows = cursor.fetchall()
        if not rows:
            print("üì≠ ≈Ω√°dn√© √∫koly nejsou k dispozici.")
            cursor.close()
            return

        # Zobrazen√≠ √∫kol≈Ø s ID a aktu√°ln√≠m stavem
        print("\nüîÑ AKTUALIZACE √öKOLU:")
        for row in rows:
            print(f"ID: {row[0]}, N√°zev: {row[1]}, Stav: {row[2]}")

        # V√Ωbƒõr √∫kolu k aktualizaci podle ID
        while True:
            try:
                id_update = int(input("Zadejte ID √∫kolu pro zmƒõnu stavu: "))
                cursor.execute("SELECT id FROM ukoly WHERE id=%s", (id_update,))
                if cursor.fetchone() is None:
                    print("‚ùå Neexistuj√≠c√≠ ID. Zkuste znovu.")
                    continue
                break
            except ValueError:
                print("‚ùå Neplatn√Ω vstup ‚Äì zadejte ƒç√≠slo.")

        # V√Ωbƒõr nov√©ho stavu √∫kolu
        print("Vyberte nov√Ω stav:\n1 - Prob√≠h√°\n2 - Hotovo")
        stav_volba = input("Zadejte volbu: ")
        if stav_volba == "1":
            novy_stav = "Prob√≠h√°"
        elif stav_volba == "2":
            novy_stav = "Hotovo"
        else:
            print("‚ùå Neplatn√° volba.")
            cursor.close()
            return

        # Aktualizace stavu v datab√°zi
        cursor.execute(
            "UPDATE ukoly SET stav=%s WHERE id=%s",
            (novy_stav, id_update)
        )
        conn.commit()
        print("‚úÖ Stav √∫kolu aktualizov√°n.")
    except mysql.connector.Error as err:
        print(f"‚ùå Chyba p≈ôi aktualizaci: {err}")
    cursor.close()

# Funkce 7: Odstranƒõn√≠ √∫kolu
def odstranit_ukol(conn):
    cursor = conn.cursor()
    try:
        # Naƒçten√≠ v≈°ech √∫kol≈Ø pro zobrazen√≠ u≈æivateli
        cursor.execute("SELECT id, nazev FROM ukoly")
        rows = cursor.fetchall()
        if not rows:
            print("üì≠ ≈Ω√°dn√© √∫koly nejsou k odstranƒõn√≠.")
            cursor.close()
            return

        # Zobrazen√≠ seznamu √∫kol≈Ø s ID
        print("\nüóëÔ∏è SEZNAM √öKOL≈Æ K ODSTRANƒöN√ç:")
        for row in rows:
            print(f"ID: {row[0]}, N√°zev: {row[1]}")

        # V√Ωbƒõr √∫kolu k odstranƒõn√≠ podle ID
        while True:
            try:
                id_delete = int(input("Zadejte ID √∫kolu k odstranƒõn√≠: "))
                cursor.execute("SELECT id FROM ukoly WHERE id=%s", (id_delete,))
                if cursor.fetchone() is None:
                    print("‚ùå Neexistuj√≠c√≠ ID. Zkuste znovu.")
                    continue
                break
            except ValueError:
                print("‚ùå Neplatn√Ω vstup ‚Äì zadejte ƒç√≠slo.")

        # Odstranƒõn√≠ √∫kolu z datab√°ze
        cursor.execute("DELETE FROM ukoly WHERE id=%s", (id_delete,))
        conn.commit()
        print("‚úÖ √ökol byl odstranƒõn.")
    except mysql.connector.Error as err:
        print(f"‚ùå Chyba p≈ôi maz√°n√≠: {err}")
    cursor.close()

# Spu≈°tƒõn√≠ hlavn√≠ho programu
if __name__ == "__main__":
    conn = pripojeni_db()  # p≈ôipojen√≠ k DB
    vytvoreni_db_a_tabulky(conn)  # vytvo≈ôen√≠ DB a tabulky, pokud je≈°tƒõ neexistuj√≠
    hlavni_menu(conn)  # spu≈°tƒõn√≠ hlavn√≠ho menu (nekoneƒçn√Ω cyklus dokud neukonƒç√≠≈° program)
    conn.close()  # uzav≈ôen√≠ p≈ôipojen√≠ k DB po ukonƒçen√≠ programu
